// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexaWorksTicket.Data;

#nullable disable

namespace NexaWorksTicket.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250310172146_UpdateIdentityProductVersionOsId")]
    partial class UpdateIdentityProductVersionOsId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.Os", b =>
                {
                    b.Property<int>("OsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OsId"));

                    b.Property<string>("OsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OsId");

                    b.ToTable("Os");
                });

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.ProductVersionOs", b =>
                {
                    b.Property<int>("IdProductVersionOs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProductVersionOs"));

                    b.Property<int>("IdOs")
                        .HasColumnType("int");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdVersion")
                        .HasColumnType("int");

                    b.HasKey("IdProductVersionOs")
                        .HasName("PK_ProductVersionOs_1");

                    b.HasIndex("IdOs");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdVersion");

                    b.ToTable("ProductVersionOs");
                });

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.ProductsVersion", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VersionId"));

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("VersionId");

                    b.ToTable("ProductsVersion", (string)null);
                });

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateOnly>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("FixingDate")
                        .HasColumnType("date");

                    b.Property<int>("FixingStatus")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductVersionOsId")
                        .HasColumnType("int");

                    b.Property<string>("ResolutionReport")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("ProductVersionOsId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.ProductVersionOs", b =>
                {
                    b.HasOne("NexaWorksTicket.Models.Bdd.Os", "IdOsNavigation")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("IdOs")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVersionOs_Os");

                    b.HasOne("NexaWorksTicket.Models.Bdd.Product", "IdProductNavigation")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVersionOs_Products");

                    b.HasOne("NexaWorksTicket.Models.Bdd.ProductsVersion", "IdVersionNavigation")
                        .WithMany("ProductVersionOs")
                        .HasForeignKey("IdVersion")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVersionOs_ProductsVersion");

                    b.Navigation("IdOsNavigation");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdVersionNavigation");
                });

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.Ticket", b =>
                {
                    b.HasOne("NexaWorksTicket.Models.Bdd.ProductVersionOs", "ProductVersionOs")
                        .WithMany("Tickets")
                        .HasForeignKey("ProductVersionOsId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_ProductVersionOs");

                    b.Navigation("ProductVersionOs");
                });

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.Os", b =>
                {
                    b.Navigation("ProductVersionOs");
                });

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.Product", b =>
                {
                    b.Navigation("ProductVersionOs");
                });

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.ProductVersionOs", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NexaWorksTicket.Models.Bdd.ProductsVersion", b =>
                {
                    b.Navigation("ProductVersionOs");
                });
#pragma warning restore 612, 618
        }
    }
}
